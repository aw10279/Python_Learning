将列表a倒序处理，如果a＝［1，2，3］，则a［：：－1］＝［3，2，1］。前两个冒号表示处理整个列表，也可以写上参数表示处理列表的一部分，例如a［2:0:－1］=［3,2］，第一个参数表示起始点包括起始点，第二个参数表示结束点但不包括结束点。最后一个参数如果为负的话，需要保证第一个参数大于第二个参数，表示依次递减逆序，否则会输出空列表。最后一个参数为正同理。


如何反序遍历一个sequence：
简便方法：如果是一个list：
[python] view plain copy print?
a = [1,2,3,4,5]  
for x in reversed(a):  
     print x  
5,4,3,2,1  

通用方法，从尾至头遍历：
[python] view plain copy print?
for x in range(len(a)-1,-1,-1):  
    print a[x]  
5,4,3,2,1  

解释：len(a)是5，所以range的表达式实际上是range(4,-1,-1)。即[4,-1),步长是-1,也就是说4是开始并包含在里面，然后-1是3，然后是2，然后是1，然后是0，-1师结尾，但不包含。所以输出是a[4],a[3],a[2],a[1],a[0],这样就做到了从尾到头便利list。

所以，有三种方法来倒序遍历一个List：
1 . for x in reversed(array):
           print x
2. for x in range(len(array)-1,-1,-1):
           print array[x]
3. for x in array[::-1]:
           print x
		   
		   
		   
		   

String模块ascii_letters和digits



GitHub中删除文件
1.在你的本地目录下手动删除你要删除的东西
2.在客户端输入：git commit -a -m "A file was deleted"
3.在客户端：git push


def genMatrix(rows,cols):  
    matrix = [[0 for col in range(cols)] for row in range(rows)]  
    for i in range(rows):  
        for j in range(cols):  
            print matrix[i][j],  
        print '\n' 
		
		
python 定义一个二维数组并初始化
import numpy as np
#第一种方法 是先生成一个list 再转换成数组 ；0 是 数组初始化的值  ；数组较大 时候 效率较慢。
image =[[0 for col in range(5)] for row in range(3)]
a = np.array(image)
#第二种方法是直接定义一个数组 数组的值默认是0，效率较高。
new_image =np.zeros((3,5))

print  'image=',image
print a
print new_image.shape,a.shape



python 判断字符串是否包含子字符串

第一种方法：in
string = 'helloworld'
if 'world' in string:
　　print 'Exist'
else:
　　print 'Not exist'
第二种方法：find
string = 'helloworld'
if string.find(’world‘) == 5: #5的意思是world字符从那个序开始，因为w位于第六个，及序为5，所以判断5
　　print 'Exist'
else:
　　print 'Not exist'
第三种方法：index，此方法与find作用类似，也是找到字符起始的序号
if string.index(’world‘) > -1: #因为-1的意思代表没有找到字符，所以判断>-1就代表能找到
　　print 'Exist'
else:
　　print 'Not exist'





Python中的random模块用于生成随机数

random.random
random.random()用于生成一个0到1的随机符点数: 0 <= n < 1.0

random.uniform
random.uniform的函数原型为：random.uniform(a, b)，用于生成一个指定范围内的随机符点数，两个参数其中一个是上限，一个是下限。如果a > b，则生成的随机数n: a <= n <= b。如果 a <b， 则 b <= n <= a。

print random.uniform(10, 20)  
print random.uniform(20, 10)  
#---- 结果（不同机器上的结果不一样）  
#18.7356606526  
#12.5798298022  

random.randint
random.randint()的函数原型为：random.randint(a, b)，用于生成一个指定范围内的整数。其中参数a是下限，参数b是上限，生成的随机数n: a <= n <= b
print random.randint(12, 20)  #生成的随机数n: 12 <= n <= 20  

random.randrange
random.randrange的函数原型为：random.randrange([start], stop[, step])，从指定范围内，按指定基数递增的集合中 获取一个随机数。如：random.randrange(10, 100, 2)，结果相当于从[10, 12, 14, 16, ... 96, 98]序列中获取一个随机数。random.randrange(10, 100, 2)在结果上与 random.choice(range(10, 100, 2) 等效。

random.choice
random.choice从序列中获取一个随机元素。其函数原型为：random.choice(sequence)。参数sequence表示一个有序类型。这里要说明一下：sequence在python不是一种特定的类型，而是泛指一系列的类型。list, tuple, 字符串都属于sequence。有关sequence可以查看python手册数据模型这一章。下面是使用choice的一些例子：
print random.choice(["JGood", "is", "a", "handsome", "boy"])  

random.shuffle
random.shuffle的函数原型为：random.shuffle(x[, random])，用于将一个列表中的元素打乱。如:
p = ["Python", "is", "powerful", "simple", "and so on..."]  
random.shuffle(p)  
print p  
#---- 结果（不同机器上的结果可能不一样。）  
#['powerful', 'simple', 'is', 'Python', 'and so on...']  

random.sample
random.sample的函数原型为：random.sample(sequence, k)，从指定序列中随机获取指定长度的片断。sample函数不会修改原有序列。
list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]  
slice = random.sample(list, 5)  #从list中随机获取5个元素，作为一个片断返回  